{"ast":null,"code":"function futureSeconds(text) {\n  return text.replace(/sekuntia?/, 'sekunnin');\n}\n\nfunction futureMinutes(text) {\n  return text.replace(/minuuttia?/, 'minuutin');\n}\n\nfunction futureHours(text) {\n  return text.replace(/tuntia?/, 'tunnin');\n}\n\nfunction futureDays(text) {\n  return text.replace(/päivää?/, 'päivän');\n}\n\nfunction futureMonths(text) {\n  return text.replace(/(kuukausi|kuukautta)/, 'kuukauden');\n}\n\nfunction futureYears(text) {\n  return text.replace(/(vuosi|vuotta)/, 'vuoden');\n}\n\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'alle sekunti',\n    other: 'alle {{count}} sekuntia',\n    futureTense: futureSeconds\n  },\n  xSeconds: {\n    one: 'sekunti',\n    other: '{{count}} sekuntia',\n    futureTense: futureSeconds\n  },\n  halfAMinute: {\n    one: 'puoli minuuttia',\n    other: 'puoli minuuttia',\n    futureTense: function (_text) {\n      return 'puolen minuutin';\n    }\n  },\n  lessThanXMinutes: {\n    one: 'alle minuutti',\n    other: 'alle {{count}} minuuttia',\n    futureTense: futureMinutes\n  },\n  xMinutes: {\n    one: 'minuutti',\n    other: '{{count}} minuuttia',\n    futureTense: futureMinutes\n  },\n  aboutXHours: {\n    one: 'noin tunti',\n    other: 'noin {{count}} tuntia',\n    futureTense: futureHours\n  },\n  xHours: {\n    one: 'tunti',\n    other: '{{count}} tuntia',\n    futureTense: futureHours\n  },\n  xDays: {\n    one: 'päivä',\n    other: '{{count}} päivää',\n    futureTense: futureDays\n  },\n  aboutXMonths: {\n    one: 'noin kuukausi',\n    other: 'noin {{count}} kuukautta',\n    futureTense: futureMonths\n  },\n  xMonths: {\n    one: 'kuukausi',\n    other: '{{count}} kuukautta',\n    futureTense: futureMonths\n  },\n  aboutXYears: {\n    one: 'noin vuosi',\n    other: 'noin {{count}} vuotta',\n    futureTense: futureYears\n  },\n  xYears: {\n    one: 'vuosi',\n    other: '{{count}} vuotta',\n    futureTense: futureYears\n  },\n  overXYears: {\n    one: 'yli vuosi',\n    other: 'yli {{count}} vuotta',\n    futureTense: futureYears\n  },\n  almostXYears: {\n    one: 'lähes vuosi',\n    other: 'lähes {{count}} vuotta',\n    futureTense: futureYears\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var distance = formatDistanceLocale[token];\n  var result = count === 1 ? distance.one : distance.other.replace('{{count}}', count);\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return distance.futureTense(result) + ' kuluttua';\n    } else {\n      return result + ' sitten';\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/shady_22/Desktop/football/node_modules/date-fns/esm/locale/fi/_lib/formatDistance/index.js"],"names":["futureSeconds","text","replace","futureMinutes","futureHours","futureDays","futureMonths","futureYears","formatDistanceLocale","lessThanXSeconds","one","other","futureTense","xSeconds","halfAMinute","_text","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","token","count","options","distance","result","addSuffix","comparison"],"mappings":"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","sourcesContent":["function futureSeconds(text) {\n  return text.replace(/sekuntia?/, 'sekunnin');\n}\n\nfunction futureMinutes(text) {\n  return text.replace(/minuuttia?/, 'minuutin');\n}\n\nfunction futureHours(text) {\n  return text.replace(/tuntia?/, 'tunnin');\n}\n\nfunction futureDays(text) {\n  return text.replace(/päivää?/, 'päivän');\n}\n\nfunction futureMonths(text) {\n  return text.replace(/(kuukausi|kuukautta)/, 'kuukauden');\n}\n\nfunction futureYears(text) {\n  return text.replace(/(vuosi|vuotta)/, 'vuoden');\n}\n\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'alle sekunti',\n    other: 'alle {{count}} sekuntia',\n    futureTense: futureSeconds\n  },\n  xSeconds: {\n    one: 'sekunti',\n    other: '{{count}} sekuntia',\n    futureTense: futureSeconds\n  },\n  halfAMinute: {\n    one: 'puoli minuuttia',\n    other: 'puoli minuuttia',\n    futureTense: function (_text) {\n      return 'puolen minuutin';\n    }\n  },\n  lessThanXMinutes: {\n    one: 'alle minuutti',\n    other: 'alle {{count}} minuuttia',\n    futureTense: futureMinutes\n  },\n  xMinutes: {\n    one: 'minuutti',\n    other: '{{count}} minuuttia',\n    futureTense: futureMinutes\n  },\n  aboutXHours: {\n    one: 'noin tunti',\n    other: 'noin {{count}} tuntia',\n    futureTense: futureHours\n  },\n  xHours: {\n    one: 'tunti',\n    other: '{{count}} tuntia',\n    futureTense: futureHours\n  },\n  xDays: {\n    one: 'päivä',\n    other: '{{count}} päivää',\n    futureTense: futureDays\n  },\n  aboutXMonths: {\n    one: 'noin kuukausi',\n    other: 'noin {{count}} kuukautta',\n    futureTense: futureMonths\n  },\n  xMonths: {\n    one: 'kuukausi',\n    other: '{{count}} kuukautta',\n    futureTense: futureMonths\n  },\n  aboutXYears: {\n    one: 'noin vuosi',\n    other: 'noin {{count}} vuotta',\n    futureTense: futureYears\n  },\n  xYears: {\n    one: 'vuosi',\n    other: '{{count}} vuotta',\n    futureTense: futureYears\n  },\n  overXYears: {\n    one: 'yli vuosi',\n    other: 'yli {{count}} vuotta',\n    futureTense: futureYears\n  },\n  almostXYears: {\n    one: 'lähes vuosi',\n    other: 'lähes {{count}} vuotta',\n    futureTense: futureYears\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var distance = formatDistanceLocale[token];\n  var result = count === 1 ? distance.one : distance.other.replace('{{count}}', count);\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return distance.futureTense(result) + ' kuluttua';\n    } else {\n      return result + ' sitten';\n    }\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}