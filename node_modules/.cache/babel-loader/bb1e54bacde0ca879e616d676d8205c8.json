{"ast":null,"code":"import isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * var result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function addBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) return new Date(NaN);\n  var hours = date.getHours();\n  var sign = amount < 0 ? -1 : 1;\n  var fullWeeks = toInteger(amount / 5);\n  date.setDate(date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n  var restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    date.setDate(date.getDate() + sign);\n    if (!isWeekend(date)) restDays -= 1;\n  } // Restore hours to avoid DST lag\n\n\n  date.setHours(hours);\n  return date;\n}","map":{"version":3,"sources":["/home/shady_22/Desktop/football/node_modules/date-fns/esm/addBusinessDays/index.js"],"names":["isWeekend","toDate","toInteger","requiredArgs","addBusinessDays","dirtyDate","dirtyAmount","arguments","date","amount","isNaN","Date","NaN","hours","getHours","sign","fullWeeks","setDate","getDate","restDays","Math","abs","setHours"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;;;;;;;;;;;;;;;;;;;AAmBA,eAAe,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,WAApC,EAAiD;AAC9DH,EAAAA,YAAY,CAAC,CAAD,EAAII,SAAJ,CAAZ;AACA,MAAIC,IAAI,GAAGP,MAAM,CAACI,SAAD,CAAjB;AACA,MAAII,MAAM,GAAGP,SAAS,CAACI,WAAD,CAAtB;AACA,MAAII,KAAK,CAACD,MAAD,CAAT,EAAmB,OAAO,IAAIE,IAAJ,CAASC,GAAT,CAAP;AACnB,MAAIC,KAAK,GAAGL,IAAI,CAACM,QAAL,EAAZ;AACA,MAAIC,IAAI,GAAGN,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA7B;AACA,MAAIO,SAAS,GAAGd,SAAS,CAACO,MAAM,GAAG,CAAV,CAAzB;AACAD,EAAAA,IAAI,CAACS,OAAL,CAAaT,IAAI,CAACU,OAAL,KAAiBF,SAAS,GAAG,CAA1C,EAR8D,CAQhB;;AAE9C,MAAIG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASZ,MAAM,GAAG,CAAlB,CAAf,CAV8D,CAUzB;;AAErC,SAAOU,QAAQ,GAAG,CAAlB,EAAqB;AACnBX,IAAAA,IAAI,CAACS,OAAL,CAAaT,IAAI,CAACU,OAAL,KAAiBH,IAA9B;AACA,QAAI,CAACf,SAAS,CAACQ,IAAD,CAAd,EAAsBW,QAAQ,IAAI,CAAZ;AACvB,GAf6D,CAe5D;;;AAGFX,EAAAA,IAAI,CAACc,QAAL,CAAcT,KAAd;AACA,SAAOL,IAAP;AACD","sourcesContent":["import isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * var result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function addBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) return new Date(NaN);\n  var hours = date.getHours();\n  var sign = amount < 0 ? -1 : 1;\n  var fullWeeks = toInteger(amount / 5);\n  date.setDate(date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n  var restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    date.setDate(date.getDate() + sign);\n    if (!isWeekend(date)) restDays -= 1;\n  } // Restore hours to avoid DST lag\n\n\n  date.setHours(hours);\n  return date;\n}"]},"metadata":{},"sourceType":"module"}