{"ast":null,"code":"import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between the given dates.\n * This function returns the difference in days as an integer whole number of 24 hour periods between two timestamps,  and thereby ignores DST changes.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n */\n\nvar MILLISECONDS_IN_DAY = 86400000;\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var result = (dateLeft - dateRight) / MILLISECONDS_IN_DAY; // round towards zero\n\n  if (result > 0) return Math.floor(result);\n  return Math.ceil(result);\n}","map":{"version":3,"sources":["/home/shady_22/Desktop/football/node_modules/date-fns/esm/differenceInDays/index.js"],"names":["toDate","requiredArgs","MILLISECONDS_IN_DAY","differenceInDays","dirtyDateLeft","dirtyDateRight","arguments","dateLeft","dateRight","result","Math","floor","ceil"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAIC,mBAAmB,GAAG,QAA1B;AACA,eAAe,SAASC,gBAAT,CAA0BC,aAA1B,EAAyCC,cAAzC,EAAyD;AACtEJ,EAAAA,YAAY,CAAC,CAAD,EAAIK,SAAJ,CAAZ;AACA,MAAIC,QAAQ,GAAGP,MAAM,CAACI,aAAD,CAArB;AACA,MAAII,SAAS,GAAGR,MAAM,CAACK,cAAD,CAAtB;AACA,MAAII,MAAM,GAAG,CAACF,QAAQ,GAAGC,SAAZ,IAAyBN,mBAAtC,CAJsE,CAIX;;AAE3D,MAAIO,MAAM,GAAG,CAAb,EAAgB,OAAOC,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAP;AAChB,SAAOC,IAAI,CAACE,IAAL,CAAUH,MAAV,CAAP;AACD","sourcesContent":["import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between the given dates.\n * This function returns the difference in days as an integer whole number of 24 hour periods between two timestamps,  and thereby ignores DST changes.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n */\n\nvar MILLISECONDS_IN_DAY = 86400000;\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var result = (dateLeft - dateRight) / MILLISECONDS_IN_DAY; // round towards zero\n\n  if (result > 0) return Math.floor(result);\n  return Math.ceil(result);\n}"]},"metadata":{},"sourceType":"module"}