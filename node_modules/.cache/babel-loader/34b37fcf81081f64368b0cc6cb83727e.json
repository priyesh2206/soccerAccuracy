{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nconst Utils_1 = require(\"../Utils\");\n\nclass Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    this.resize();\n    const options = this.container.options;\n    const cover = options.backgroundMask.cover;\n    const color = cover.color;\n    const trail = options.particles.move.trail;\n    this.coverColor = Utils_1.ColorUtils.colorToRgb(color);\n    this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n    this.initBackground();\n    this.paint();\n  }\n\n  loadCanvas(canvas, generatedCanvas) {\n    var _a;\n\n    if (!canvas.className) {\n      canvas.className = Utils_1.Constants.canvasClass;\n    }\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n    this.element = canvas;\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.element.width = this.size.width;\n    this.element.height = this.size.height;\n  }\n\n  paint() {\n    const options = this.container.options;\n\n    if (this.context) {\n      if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n        this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor));\n      } else {\n        this.paintBase();\n      }\n    }\n  }\n\n  clear() {\n    const options = this.container.options;\n    const trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n    } else if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  drawLinkTriangle(p1, link1, link2) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link1.destination;\n    const p3 = link2.destination;\n    const triangleOptions = p1.particlesOptions.links.triangles;\n    const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const pos3 = p3.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n\n    if (!colorTriangle) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n      if (linkColor === Utils_1.Constants.randomColorValue) {\n        colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n      } else if (linkColor === \"mid\") {\n        const sourceColor = p1.getFillColor();\n        const destColor = p2.getFillColor();\n\n        if (sourceColor && destColor) {\n          colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n        } else {\n          const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n          if (!hslColor) {\n            return;\n          }\n\n          colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n        }\n      } else {\n        colorTriangle = linkColor;\n      }\n    }\n\n    const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n    Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n  }\n\n  drawLinkLine(p1, link) {\n    var _a;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link.destination;\n    let opacity = link.opacity;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorLine;\n    const twinkle = p1.particlesOptions.twinkle.lines;\n\n    if (twinkle.enable) {\n      const twinkleFreq = twinkle.frequency;\n      const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n      const twinkling = Math.random() < twinkleFreq;\n\n      if (twinkling && twinkleRgb !== undefined) {\n        colorLine = twinkleRgb;\n        opacity = twinkle.opacity;\n      }\n    }\n\n    if (!colorLine) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n      if (linkColor === Utils_1.Constants.randomColorValue) {\n        colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n      } else if (linkColor === \"mid\") {\n        const sourceColor = p1.getFillColor();\n        const destColor = p2.getFillColor();\n\n        if (sourceColor && destColor) {\n          colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n        } else {\n          const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n          if (!hslColor) {\n            return;\n          }\n\n          colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n        }\n      } else {\n        colorLine = linkColor;\n      }\n    }\n\n    const width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n    Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n  }\n\n  drawConnectLine(p1, p2) {\n    var _a;\n\n    const lineStyle = this.lineStyle(p1, p2);\n\n    if (!lineStyle) {\n      return;\n    }\n\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    var _a;\n\n    const container = this.container;\n    const ctx = container.canvas.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const beginPos = particle.getPosition();\n    Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d, _e;\n\n    if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor();\n\n    if (pfColor === undefined) {\n      return;\n    }\n\n    const psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n    const options = this.container.options;\n    const twinkle = particle.particlesOptions.twinkle.particles;\n    const twinkleFreq = twinkle.frequency;\n    const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n    const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n    const radius = (_c = particle.bubble.radius) !== null && _c !== void 0 ? _c : particle.size.value;\n    const opacity = twinkling ? twinkle.opacity : (_d = particle.bubble.opacity) !== null && _d !== void 0 ? _d : particle.opacity.value;\n    const infectionStage = particle.infecter.infectionStage;\n    const infection = options.infection;\n    const infectionStages = infection.stages;\n    const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n    const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n    const fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pfColor);\n    const sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(psColor);\n    const fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n\n    if (!this.context || !fillColorValue) {\n      return;\n    }\n\n    const strokeColorValue = sColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_e = particle.stroke.opacity) !== null && _e !== void 0 ? _e : opacity) : fillColorValue;\n\n    if (particle.links.length > 0) {\n      this.context.save();\n\n      for (const link of particle.links) {\n        if (particle.particlesOptions.links.triangles.enable) {\n          const links = particle.links.map(l => l.destination);\n          const vertices = link.destination.links.filter(t => links.indexOf(t.destination) >= 0);\n\n          if (vertices.length) {\n            for (const vertice of vertices) {\n              this.drawLinkTriangle(particle, link, vertice);\n            }\n          }\n        }\n\n        this.drawLinkLine(particle, link);\n      }\n\n      this.context.restore();\n    }\n\n    Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n  }\n\n  drawPlugin(plugin, delta) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n  }\n\n  paintBase(baseColor) {\n    if (this.context) {\n      Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n    }\n  }\n\n  lineStyle(p1, p2) {\n    const options = this.container.options;\n    const connectOptions = options.interactivity.modes.connect;\n\n    if (this.context) {\n      return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n    }\n  }\n\n  initBackground() {\n    const options = this.container.options;\n    const background = options.background;\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    const elementStyle = element.style;\n\n    if (background.color) {\n      const color = Utils_1.ColorUtils.colorToRgb(background.color);\n\n      if (color) {\n        elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n      }\n    }\n\n    if (background.image) {\n      elementStyle.backgroundImage = background.image;\n    }\n\n    if (background.position) {\n      elementStyle.backgroundPosition = background.position;\n    }\n\n    if (background.repeat) {\n      elementStyle.backgroundRepeat = background.repeat;\n    }\n\n    if (background.size) {\n      elementStyle.backgroundSize = background.size;\n    }\n  }\n\n}\n\nexports.Canvas = Canvas;","map":{"version":3,"sources":["/home/shady_22/Desktop/football/node_modules/tsparticles/dist/Core/Canvas.js"],"names":["Object","defineProperty","exports","value","Canvas","Utils_1","require","constructor","container","size","height","width","context","generatedCanvas","init","resize","options","cover","backgroundMask","color","trail","particles","move","coverColor","ColorUtils","colorToRgb","trailFillColor","fillColor","initBackground","paint","loadCanvas","canvas","_a","className","Constants","canvasClass","element","remove","offsetHeight","offsetWidth","getContext","retina","destroy","CanvasUtils","clear","enable","paintBase","getStyleFromRgb","length","drawLinkTriangle","p1","link1","link2","_b","p2","destination","p3","triangleOptions","particlesOptions","links","triangles","opacityTriangle","opacity","pos1","getPosition","pos2","pos3","ctx","colorTriangle","linksOptions","linkColor","id","undefined","linksColors","get","linksColor","randomColorValue","getRandomRgbColor","sourceColor","getFillColor","destColor","mix","hslColor","hslToRgb","linksWidth","drawLinkLine","link","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","twinkling","Math","random","distance","warp","shadow","drawConnectLine","lineStyle","drawGrabLine","particle","lineColor","mousePos","beginPos","drawParticle","delta","_c","_d","_e","image","loaded","pfColor","psColor","getStrokeColor","radius","bubble","infectionStage","infecter","infection","infectionStages","stages","infectionColor","infectionRgb","fColor","sColor","fillColorValue","strokeColorValue","stroke","save","map","l","vertices","filter","t","indexOf","vertice","restore","drawPlugin","plugin","baseColor","connectOptions","interactivity","modes","connect","gradient","background","elementStyle","style","backgroundColor","backgroundImage","position","backgroundPosition","repeat","backgroundRepeat","backgroundSize"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMF,MAAN,CAAa;AACTG,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAY;AACRC,MAAAA,MAAM,EAAE,CADA;AAERC,MAAAA,KAAK,EAAE;AAFC,KAAZ;AAIA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,SAAKC,MAAL;AACA,UAAMC,OAAO,GAAG,KAAKR,SAAL,CAAeQ,OAA/B;AACA,UAAMC,KAAK,GAAGD,OAAO,CAACE,cAAR,CAAuBD,KAArC;AACA,UAAME,KAAK,GAAGF,KAAK,CAACE,KAApB;AACA,UAAMC,KAAK,GAAGJ,OAAO,CAACK,SAAR,CAAkBC,IAAlB,CAAuBF,KAArC;AACA,SAAKG,UAAL,GAAkBlB,OAAO,CAACmB,UAAR,CAAmBC,UAAnB,CAA8BN,KAA9B,CAAlB;AACA,SAAKO,cAAL,GAAsBrB,OAAO,CAACmB,UAAR,CAAmBC,UAAnB,CAA8BL,KAAK,CAACO,SAApC,CAAtB;AACA,SAAKC,cAAL;AACA,SAAKC,KAAL;AACH;;AACDC,EAAAA,UAAU,CAACC,MAAD,EAASlB,eAAT,EAA0B;AAChC,QAAImB,EAAJ;;AACA,QAAI,CAACD,MAAM,CAACE,SAAZ,EAAuB;AACnBF,MAAAA,MAAM,CAACE,SAAP,GAAmB5B,OAAO,CAAC6B,SAAR,CAAkBC,WAArC;AACH;;AACD,QAAI,KAAKtB,eAAT,EAA0B;AACtB,OAACmB,EAAE,GAAG,KAAKI,OAAX,MAAwB,IAAxB,IAAgCJ,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACK,MAAH,EAAzD;AACH;;AACD,SAAKxB,eAAL,GAAuBA,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyDA,eAAzD,GAA2E,KAAlG;AACA,SAAKuB,OAAL,GAAeL,MAAf;AACA,SAAKtB,IAAL,CAAUC,MAAV,GAAmBqB,MAAM,CAACO,YAA1B;AACA,SAAK7B,IAAL,CAAUE,KAAV,GAAkBoB,MAAM,CAACQ,WAAzB;AACA,SAAK3B,OAAL,GAAe,KAAKwB,OAAL,CAAaI,UAAb,CAAwB,IAAxB,CAAf;AACA,SAAKhC,SAAL,CAAeiC,MAAf,CAAsB3B,IAAtB;AACA,SAAKc,cAAL;AACH;;AACDc,EAAAA,OAAO,GAAG;AACN,QAAIV,EAAJ;;AACA,QAAI,KAAKnB,eAAT,EAA0B;AACtB,OAACmB,EAAE,GAAG,KAAKI,OAAX,MAAwB,IAAxB,IAAgCJ,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACK,MAAH,EAAzD;AACH;;AACD,QAAI,KAAKzB,OAAT,EAAkB;AACdP,MAAAA,OAAO,CAACsC,WAAR,CAAoBC,KAApB,CAA0B,KAAKhC,OAA/B,EAAwC,KAAKH,IAA7C;AACH;AACJ;;AACDM,EAAAA,MAAM,GAAG;AACL,QAAI,CAAC,KAAKqB,OAAV,EAAmB;AACf;AACH;;AACD,SAAKA,OAAL,CAAazB,KAAb,GAAqB,KAAKF,IAAL,CAAUE,KAA/B;AACA,SAAKyB,OAAL,CAAa1B,MAAb,GAAsB,KAAKD,IAAL,CAAUC,MAAhC;AACH;;AACDmB,EAAAA,KAAK,GAAG;AACJ,UAAMb,OAAO,GAAG,KAAKR,SAAL,CAAeQ,OAA/B;;AACA,QAAI,KAAKJ,OAAT,EAAkB;AACd,UAAII,OAAO,CAACE,cAAR,CAAuB2B,MAAvB,IAAiC7B,OAAO,CAACE,cAAR,CAAuBD,KAAxD,IAAiE,KAAKM,UAA1E,EAAsF;AAClF,aAAKuB,SAAL,CAAezC,OAAO,CAACmB,UAAR,CAAmBuB,eAAnB,CAAmC,KAAKxB,UAAxC,CAAf;AACH,OAFD,MAGK;AACD,aAAKuB,SAAL;AACH;AACJ;AACJ;;AACDF,EAAAA,KAAK,GAAG;AACJ,UAAM5B,OAAO,GAAG,KAAKR,SAAL,CAAeQ,OAA/B;AACA,UAAMI,KAAK,GAAGJ,OAAO,CAACK,SAAR,CAAkBC,IAAlB,CAAuBF,KAArC;;AACA,QAAIJ,OAAO,CAACE,cAAR,CAAuB2B,MAA3B,EAAmC;AAC/B,WAAKhB,KAAL;AACH,KAFD,MAGK,IAAIT,KAAK,CAACyB,MAAN,IAAgBzB,KAAK,CAAC4B,MAAN,GAAe,CAA/B,IAAoC,KAAKtB,cAA7C,EAA6D;AAC9D,WAAKoB,SAAL,CAAezC,OAAO,CAACmB,UAAR,CAAmBuB,eAAnB,CAAmC,KAAKrB,cAAxC,EAAwD,IAAIN,KAAK,CAAC4B,MAAlE,CAAf;AACH,KAFI,MAGA,IAAI,KAAKpC,OAAT,EAAkB;AACnBP,MAAAA,OAAO,CAACsC,WAAR,CAAoBC,KAApB,CAA0B,KAAKhC,OAA/B,EAAwC,KAAKH,IAA7C;AACH;AACJ;;AACDwC,EAAAA,gBAAgB,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB;AAC/B,QAAIpB,EAAJ,EAAQqB,EAAR;;AACA,UAAM7C,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMQ,OAAO,GAAGR,SAAS,CAACQ,OAA1B;AACA,UAAMsC,EAAE,GAAGH,KAAK,CAACI,WAAjB;AACA,UAAMC,EAAE,GAAGJ,KAAK,CAACG,WAAjB;AACA,UAAME,eAAe,GAAGP,EAAE,CAACQ,gBAAH,CAAoBC,KAApB,CAA0BC,SAAlD;AACA,UAAMC,eAAe,GAAG,CAAC7B,EAAE,GAAGyB,eAAe,CAACK,OAAtB,MAAmC,IAAnC,IAA2C9B,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgE,CAACmB,KAAK,CAACW,OAAN,GAAgBV,KAAK,CAACU,OAAvB,IAAkC,CAA1H;AACA,UAAMC,IAAI,GAAGb,EAAE,CAACc,WAAH,EAAb;AACA,UAAMC,IAAI,GAAGX,EAAE,CAACU,WAAH,EAAb;AACA,UAAME,IAAI,GAAGV,EAAE,CAACQ,WAAH,EAAb;AACA,UAAMG,GAAG,GAAG,KAAKvD,OAAjB;;AACA,QAAI,CAACuD,GAAL,EAAU;AACN;AACH;;AACD,QAAIC,aAAa,GAAG/D,OAAO,CAACmB,UAAR,CAAmBC,UAAnB,CAA8BgC,eAAe,CAACtC,KAA9C,CAApB;;AACA,QAAI,CAACiD,aAAL,EAAoB;AAChB,YAAMC,YAAY,GAAGnB,EAAE,CAACQ,gBAAH,CAAoBC,KAAzC;AACA,YAAMW,SAAS,GAAGD,YAAY,CAACE,EAAb,KAAoBC,SAApB,GACZhE,SAAS,CAACa,SAAV,CAAoBoD,WAApB,CAAgCC,GAAhC,CAAoCL,YAAY,CAACE,EAAjD,CADY,GAEZ/D,SAAS,CAACa,SAAV,CAAoBsD,UAF1B;;AAGA,UAAIL,SAAS,KAAKjE,OAAO,CAAC6B,SAAR,CAAkB0C,gBAApC,EAAsD;AAClDR,QAAAA,aAAa,GAAG/D,OAAO,CAACmB,UAAR,CAAmBqD,iBAAnB,EAAhB;AACH,OAFD,MAGK,IAAIP,SAAS,KAAK,KAAlB,EAAyB;AAC1B,cAAMQ,WAAW,GAAG5B,EAAE,CAAC6B,YAAH,EAApB;AACA,cAAMC,SAAS,GAAG1B,EAAE,CAACyB,YAAH,EAAlB;;AACA,YAAID,WAAW,IAAIE,SAAnB,EAA8B;AAC1BZ,UAAAA,aAAa,GAAG/D,OAAO,CAACmB,UAAR,CAAmByD,GAAnB,CAAuBH,WAAvB,EAAoCE,SAApC,EAA+C9B,EAAE,CAACzC,IAAH,CAAQN,KAAvD,EAA8DmD,EAAE,CAAC7C,IAAH,CAAQN,KAAtE,CAAhB;AACH,SAFD,MAGK;AACD,gBAAM+E,QAAQ,GAAGJ,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiDA,WAAjD,GAA+DE,SAAhF;;AACA,cAAI,CAACE,QAAL,EAAe;AACX;AACH;;AACDd,UAAAA,aAAa,GAAG/D,OAAO,CAACmB,UAAR,CAAmB2D,QAAnB,CAA4BD,QAA5B,CAAhB;AACH;AACJ,OAbI,MAcA;AACDd,QAAAA,aAAa,GAAGE,SAAhB;AACH;AACJ;;AACD,UAAM3D,KAAK,GAAG,CAAC0C,EAAE,GAAGH,EAAE,CAACkC,UAAT,MAAyB,IAAzB,IAAiC/B,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsD7C,SAAS,CAACiC,MAAV,CAAiB2C,UAArF;AACA/E,IAAAA,OAAO,CAACsC,WAAR,CAAoBM,gBAApB,CAAqCkB,GAArC,EAA0CxD,KAA1C,EAAiDoD,IAAjD,EAAuDE,IAAvD,EAA6DC,IAA7D,EAAmElD,OAAO,CAACE,cAAR,CAAuB2B,MAA1F,EAAkGuB,aAAlG,EAAiHP,eAAjH;AACH;;AACDwB,EAAAA,YAAY,CAACnC,EAAD,EAAKoC,IAAL,EAAW;AACnB,QAAItD,EAAJ;;AACA,UAAMxB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMQ,OAAO,GAAGR,SAAS,CAACQ,OAA1B;AACA,UAAMsC,EAAE,GAAGgC,IAAI,CAAC/B,WAAhB;AACA,QAAIO,OAAO,GAAGwB,IAAI,CAACxB,OAAnB;AACA,UAAMC,IAAI,GAAGb,EAAE,CAACc,WAAH,EAAb;AACA,UAAMC,IAAI,GAAGX,EAAE,CAACU,WAAH,EAAb;AACA,UAAMG,GAAG,GAAG,KAAKvD,OAAjB;;AACA,QAAI,CAACuD,GAAL,EAAU;AACN;AACH;;AACD,QAAIoB,SAAJ;AACA,UAAMC,OAAO,GAAGtC,EAAE,CAACQ,gBAAH,CAAoB8B,OAApB,CAA4BC,KAA5C;;AACA,QAAID,OAAO,CAAC3C,MAAZ,EAAoB;AAChB,YAAM6C,WAAW,GAAGF,OAAO,CAACG,SAA5B;AACA,YAAMC,UAAU,GAAGvF,OAAO,CAACmB,UAAR,CAAmBC,UAAnB,CAA8B+D,OAAO,CAACrE,KAAtC,CAAnB;AACA,YAAM0E,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAgBL,WAAlC;;AACA,UAAIG,SAAS,IAAID,UAAU,KAAKpB,SAAhC,EAA2C;AACvCe,QAAAA,SAAS,GAAGK,UAAZ;AACA9B,QAAAA,OAAO,GAAG0B,OAAO,CAAC1B,OAAlB;AACH;AACJ;;AACD,QAAI,CAACyB,SAAL,EAAgB;AACZ,YAAMlB,YAAY,GAAGnB,EAAE,CAACQ,gBAAH,CAAoBC,KAAzC;AACA,YAAMW,SAAS,GAAGD,YAAY,CAACE,EAAb,KAAoBC,SAApB,GACZhE,SAAS,CAACa,SAAV,CAAoBoD,WAApB,CAAgCC,GAAhC,CAAoCL,YAAY,CAACE,EAAjD,CADY,GAEZ/D,SAAS,CAACa,SAAV,CAAoBsD,UAF1B;;AAGA,UAAIL,SAAS,KAAKjE,OAAO,CAAC6B,SAAR,CAAkB0C,gBAApC,EAAsD;AAClDW,QAAAA,SAAS,GAAGlF,OAAO,CAACmB,UAAR,CAAmBqD,iBAAnB,EAAZ;AACH,OAFD,MAGK,IAAIP,SAAS,KAAK,KAAlB,EAAyB;AAC1B,cAAMQ,WAAW,GAAG5B,EAAE,CAAC6B,YAAH,EAApB;AACA,cAAMC,SAAS,GAAG1B,EAAE,CAACyB,YAAH,EAAlB;;AACA,YAAID,WAAW,IAAIE,SAAnB,EAA8B;AAC1BO,UAAAA,SAAS,GAAGlF,OAAO,CAACmB,UAAR,CAAmByD,GAAnB,CAAuBH,WAAvB,EAAoCE,SAApC,EAA+C9B,EAAE,CAACzC,IAAH,CAAQN,KAAvD,EAA8DmD,EAAE,CAAC7C,IAAH,CAAQN,KAAtE,CAAZ;AACH,SAFD,MAGK;AACD,gBAAM+E,QAAQ,GAAGJ,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiDA,WAAjD,GAA+DE,SAAhF;;AACA,cAAI,CAACE,QAAL,EAAe;AACX;AACH;;AACDK,UAAAA,SAAS,GAAGlF,OAAO,CAACmB,UAAR,CAAmB2D,QAAnB,CAA4BD,QAA5B,CAAZ;AACH;AACJ,OAbI,MAcA;AACDK,QAAAA,SAAS,GAAGjB,SAAZ;AACH;AACJ;;AACD,UAAM3D,KAAK,GAAG,CAACqB,EAAE,GAAGkB,EAAE,CAACkC,UAAT,MAAyB,IAAzB,IAAiCpD,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsDxB,SAAS,CAACiC,MAAV,CAAiB2C,UAArF;AACA/E,IAAAA,OAAO,CAACsC,WAAR,CAAoB0C,YAApB,CAAiClB,GAAjC,EAAsCxD,KAAtC,EAA6CoD,IAA7C,EAAmDE,IAAnD,EAAyDf,EAAE,CAACQ,gBAAH,CAAoBC,KAApB,CAA0BqC,QAAnF,EAA6FxF,SAAS,CAACuB,MAAV,CAAiBtB,IAA9G,EAAoHyC,EAAE,CAACQ,gBAAH,CAAoBC,KAApB,CAA0BsC,IAA9I,EAAoJjF,OAAO,CAACE,cAAR,CAAuB2B,MAA3K,EAAmL0C,SAAnL,EAA8LzB,OAA9L,EAAuMZ,EAAE,CAACQ,gBAAH,CAAoBC,KAApB,CAA0BuC,MAAjO;AACH;;AACDC,EAAAA,eAAe,CAACjD,EAAD,EAAKI,EAAL,EAAS;AACpB,QAAItB,EAAJ;;AACA,UAAMoE,SAAS,GAAG,KAAKA,SAAL,CAAelD,EAAf,EAAmBI,EAAnB,CAAlB;;AACA,QAAI,CAAC8C,SAAL,EAAgB;AACZ;AACH;;AACD,UAAMjC,GAAG,GAAG,KAAKvD,OAAjB;;AACA,QAAI,CAACuD,GAAL,EAAU;AACN;AACH;;AACD,UAAMJ,IAAI,GAAGb,EAAE,CAACc,WAAH,EAAb;AACA,UAAMC,IAAI,GAAGX,EAAE,CAACU,WAAH,EAAb;AACA3D,IAAAA,OAAO,CAACsC,WAAR,CAAoBwD,eAApB,CAAoChC,GAApC,EAAyC,CAACnC,EAAE,GAAGkB,EAAE,CAACkC,UAAT,MAAyB,IAAzB,IAAiCpD,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsD,KAAKxB,SAAL,CAAeiC,MAAf,CAAsB2C,UAArH,EAAiIgB,SAAjI,EAA4IrC,IAA5I,EAAkJE,IAAlJ;AACH;;AACDoC,EAAAA,YAAY,CAACC,QAAD,EAAWC,SAAX,EAAsBzC,OAAtB,EAA+B0C,QAA/B,EAAyC;AACjD,QAAIxE,EAAJ;;AACA,UAAMxB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAM2D,GAAG,GAAG3D,SAAS,CAACuB,MAAV,CAAiBnB,OAA7B;;AACA,QAAI,CAACuD,GAAL,EAAU;AACN;AACH;;AACD,UAAMsC,QAAQ,GAAGH,QAAQ,CAACtC,WAAT,EAAjB;AACA3D,IAAAA,OAAO,CAACsC,WAAR,CAAoB0D,YAApB,CAAiClC,GAAjC,EAAsC,CAACnC,EAAE,GAAGsE,QAAQ,CAAClB,UAAf,MAA+B,IAA/B,IAAuCpD,EAAE,KAAK,KAAK,CAAnD,GAAuDA,EAAvD,GAA4DxB,SAAS,CAACiC,MAAV,CAAiB2C,UAAnH,EAA+HqB,QAA/H,EAAyID,QAAzI,EAAmJD,SAAnJ,EAA8JzC,OAA9J;AACH;;AACD4C,EAAAA,YAAY,CAACJ,QAAD,EAAWK,KAAX,EAAkB;AAC1B,QAAI3E,EAAJ,EAAQqB,EAAR,EAAYuD,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB;;AACA,QAAI,CAAC,CAAC9E,EAAE,GAAGsE,QAAQ,CAACS,KAAf,MAA0B,IAA1B,IAAkC/E,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACgF,MAA/D,MAA2E,KAA/E,EAAsF;AAClF;AACH;;AACD,UAAMC,OAAO,GAAGX,QAAQ,CAACvB,YAAT,EAAhB;;AACA,QAAIkC,OAAO,KAAKzC,SAAhB,EAA2B;AACvB;AACH;;AACD,UAAM0C,OAAO,GAAG,CAAC7D,EAAE,GAAGiD,QAAQ,CAACa,cAAT,EAAN,MAAqC,IAArC,IAA6C9D,EAAE,KAAK,KAAK,CAAzD,GAA6DA,EAA7D,GAAkE4D,OAAlF;AACA,UAAMjG,OAAO,GAAG,KAAKR,SAAL,CAAeQ,OAA/B;AACA,UAAMwE,OAAO,GAAGc,QAAQ,CAAC5C,gBAAT,CAA0B8B,OAA1B,CAAkCnE,SAAlD;AACA,UAAMqE,WAAW,GAAGF,OAAO,CAACG,SAA5B;AACA,UAAMC,UAAU,GAAGvF,OAAO,CAACmB,UAAR,CAAmBC,UAAnB,CAA8B+D,OAAO,CAACrE,KAAtC,CAAnB;AACA,UAAM0E,SAAS,GAAGL,OAAO,CAAC3C,MAAR,IAAkBiD,IAAI,CAACC,MAAL,KAAgBL,WAApD;AACA,UAAM0B,MAAM,GAAG,CAACR,EAAE,GAAGN,QAAQ,CAACe,MAAT,CAAgBD,MAAtB,MAAkC,IAAlC,IAA0CR,EAAE,KAAK,KAAK,CAAtD,GAA0DA,EAA1D,GAA+DN,QAAQ,CAAC7F,IAAT,CAAcN,KAA5F;AACA,UAAM2D,OAAO,GAAG+B,SAAS,GAAGL,OAAO,CAAC1B,OAAX,GAAqB,CAAC+C,EAAE,GAAGP,QAAQ,CAACe,MAAT,CAAgBvD,OAAtB,MAAmC,IAAnC,IAA2C+C,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgEP,QAAQ,CAACxC,OAAT,CAAiB3D,KAA/H;AACA,UAAMmH,cAAc,GAAGhB,QAAQ,CAACiB,QAAT,CAAkBD,cAAzC;AACA,UAAME,SAAS,GAAGxG,OAAO,CAACwG,SAA1B;AACA,UAAMC,eAAe,GAAGD,SAAS,CAACE,MAAlC;AACA,UAAMC,cAAc,GAAGL,cAAc,KAAK9C,SAAnB,GAA+BiD,eAAe,CAACH,cAAD,CAAf,CAAgCnG,KAA/D,GAAuEqD,SAA9F;AACA,UAAMoD,YAAY,GAAGvH,OAAO,CAACmB,UAAR,CAAmBC,UAAnB,CAA8BkG,cAA9B,CAArB;AACA,UAAME,MAAM,GAAGhC,SAAS,IAAID,UAAU,KAAKpB,SAA5B,GAAwCoB,UAAxC,GAAqDgC,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmDA,YAAnD,GAAkEvH,OAAO,CAACmB,UAAR,CAAmB2D,QAAnB,CAA4B8B,OAA5B,CAAtI;AACA,UAAMa,MAAM,GAAGjC,SAAS,IAAID,UAAU,KAAKpB,SAA5B,GAAwCoB,UAAxC,GAAqDgC,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmDA,YAAnD,GAAkEvH,OAAO,CAACmB,UAAR,CAAmB2D,QAAnB,CAA4B+B,OAA5B,CAAtI;AACA,UAAMa,cAAc,GAAGF,MAAM,KAAKrD,SAAX,GAAuBnE,OAAO,CAACmB,UAAR,CAAmBuB,eAAnB,CAAmC8E,MAAnC,EAA2C/D,OAA3C,CAAvB,GAA6EU,SAApG;;AACA,QAAI,CAAC,KAAK5D,OAAN,IAAiB,CAACmH,cAAtB,EAAsC;AAClC;AACH;;AACD,UAAMC,gBAAgB,GAAGF,MAAM,KAAKtD,SAAX,GACnBnE,OAAO,CAACmB,UAAR,CAAmBuB,eAAnB,CAAmC+E,MAAnC,EAA2C,CAAChB,EAAE,GAAGR,QAAQ,CAAC2B,MAAT,CAAgBnE,OAAtB,MAAmC,IAAnC,IAA2CgD,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgEhD,OAA3G,CADmB,GAEnBiE,cAFN;;AAGA,QAAIzB,QAAQ,CAAC3C,KAAT,CAAeX,MAAf,GAAwB,CAA5B,EAA+B;AAC3B,WAAKpC,OAAL,CAAasH,IAAb;;AACA,WAAK,MAAM5C,IAAX,IAAmBgB,QAAQ,CAAC3C,KAA5B,EAAmC;AAC/B,YAAI2C,QAAQ,CAAC5C,gBAAT,CAA0BC,KAA1B,CAAgCC,SAAhC,CAA0Cf,MAA9C,EAAsD;AAClD,gBAAMc,KAAK,GAAG2C,QAAQ,CAAC3C,KAAT,CAAewE,GAAf,CAAoBC,CAAD,IAAOA,CAAC,CAAC7E,WAA5B,CAAd;AACA,gBAAM8E,QAAQ,GAAG/C,IAAI,CAAC/B,WAAL,CAAiBI,KAAjB,CAAuB2E,MAAvB,CAA+BC,CAAD,IAAO5E,KAAK,CAAC6E,OAAN,CAAcD,CAAC,CAAChF,WAAhB,KAAgC,CAArE,CAAjB;;AACA,cAAI8E,QAAQ,CAACrF,MAAb,EAAqB;AACjB,iBAAK,MAAMyF,OAAX,IAAsBJ,QAAtB,EAAgC;AAC5B,mBAAKpF,gBAAL,CAAsBqD,QAAtB,EAAgChB,IAAhC,EAAsCmD,OAAtC;AACH;AACJ;AACJ;;AACD,aAAKpD,YAAL,CAAkBiB,QAAlB,EAA4BhB,IAA5B;AACH;;AACD,WAAK1E,OAAL,CAAa8H,OAAb;AACH;;AACDrI,IAAAA,OAAO,CAACsC,WAAR,CAAoB+D,YAApB,CAAiC,KAAKlG,SAAtC,EAAiD,KAAKI,OAAtD,EAA+D0F,QAA/D,EAAyEK,KAAzE,EAAgFoB,cAAhF,EAAgGC,gBAAhG,EAAkHhH,OAAO,CAACE,cAAR,CAAuB2B,MAAzI,EAAiJuE,MAAjJ,EAAyJtD,OAAzJ,EAAkKwC,QAAQ,CAAC5C,gBAAT,CAA0BwC,MAA5L;AACH;;AACDyC,EAAAA,UAAU,CAACC,MAAD,EAASjC,KAAT,EAAgB;AACtB,QAAI,CAAC,KAAK/F,OAAV,EAAmB;AACf;AACH;;AACDP,IAAAA,OAAO,CAACsC,WAAR,CAAoBgG,UAApB,CAA+B,KAAK/H,OAApC,EAA6CgI,MAA7C,EAAqDjC,KAArD;AACH;;AACD7D,EAAAA,SAAS,CAAC+F,SAAD,EAAY;AACjB,QAAI,KAAKjI,OAAT,EAAkB;AACdP,MAAAA,OAAO,CAACsC,WAAR,CAAoBG,SAApB,CAA8B,KAAKlC,OAAnC,EAA4C,KAAKH,IAAjD,EAAuDoI,SAAvD;AACH;AACJ;;AACDzC,EAAAA,SAAS,CAAClD,EAAD,EAAKI,EAAL,EAAS;AACd,UAAMtC,OAAO,GAAG,KAAKR,SAAL,CAAeQ,OAA/B;AACA,UAAM8H,cAAc,GAAG9H,OAAO,CAAC+H,aAAR,CAAsBC,KAAtB,CAA4BC,OAAnD;;AACA,QAAI,KAAKrI,OAAT,EAAkB;AACd,aAAOP,OAAO,CAACsC,WAAR,CAAoBuG,QAApB,CAA6B,KAAKtI,OAAlC,EAA2CsC,EAA3C,EAA+CI,EAA/C,EAAmDwF,cAAc,CAACnF,KAAf,CAAqBG,OAAxE,CAAP;AACH;AACJ;;AACDlC,EAAAA,cAAc,GAAG;AACb,UAAMZ,OAAO,GAAG,KAAKR,SAAL,CAAeQ,OAA/B;AACA,UAAMmI,UAAU,GAAGnI,OAAO,CAACmI,UAA3B;AACA,UAAM/G,OAAO,GAAG,KAAKA,OAArB;;AACA,QAAI,CAACA,OAAL,EAAc;AACV;AACH;;AACD,UAAMgH,YAAY,GAAGhH,OAAO,CAACiH,KAA7B;;AACA,QAAIF,UAAU,CAAChI,KAAf,EAAsB;AAClB,YAAMA,KAAK,GAAGd,OAAO,CAACmB,UAAR,CAAmBC,UAAnB,CAA8B0H,UAAU,CAAChI,KAAzC,CAAd;;AACA,UAAIA,KAAJ,EAAW;AACPiI,QAAAA,YAAY,CAACE,eAAb,GAA+BjJ,OAAO,CAACmB,UAAR,CAAmBuB,eAAnB,CAAmC5B,KAAnC,EAA0CgI,UAAU,CAACrF,OAArD,CAA/B;AACH;AACJ;;AACD,QAAIqF,UAAU,CAACpC,KAAf,EAAsB;AAClBqC,MAAAA,YAAY,CAACG,eAAb,GAA+BJ,UAAU,CAACpC,KAA1C;AACH;;AACD,QAAIoC,UAAU,CAACK,QAAf,EAAyB;AACrBJ,MAAAA,YAAY,CAACK,kBAAb,GAAkCN,UAAU,CAACK,QAA7C;AACH;;AACD,QAAIL,UAAU,CAACO,MAAf,EAAuB;AACnBN,MAAAA,YAAY,CAACO,gBAAb,GAAgCR,UAAU,CAACO,MAA3C;AACH;;AACD,QAAIP,UAAU,CAAC1I,IAAf,EAAqB;AACjB2I,MAAAA,YAAY,CAACQ,cAAb,GAA8BT,UAAU,CAAC1I,IAAzC;AACH;AACJ;;AAnSQ;;AAqSbP,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nconst Utils_1 = require(\"../Utils\");\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        const options = this.container.options;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const trail = options.particles.move.trail;\n        this.coverColor = Utils_1.ColorUtils.colorToRgb(color);\n        this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas, generatedCanvas) {\n        var _a;\n        if (!canvas.className) {\n            canvas.className = Utils_1.Constants.canvasClass;\n        }\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n        this.element = canvas;\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        this.element.width = this.size.width;\n        this.element.height = this.size.height;\n    }\n    paint() {\n        const options = this.container.options;\n        if (this.context) {\n            if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n                this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor));\n            }\n            else {\n                this.paintBase();\n            }\n        }\n    }\n    clear() {\n        const options = this.container.options;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link1.destination;\n        const p3 = link2.destination;\n        const triangleOptions = p1.particlesOptions.links.triangles;\n        const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const pos3 = p3.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n        if (!colorTriangle) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors.get(linksOptions.id)\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = p1.getFillColor();\n                const destColor = p2.getFillColor();\n                if (sourceColor && destColor) {\n                    colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorTriangle = linkColor;\n            }\n        }\n        const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n    }\n    drawLinkLine(p1, link) {\n        var _a;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link.destination;\n        let opacity = link.opacity;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorLine;\n        const twinkle = p1.particlesOptions.twinkle.lines;\n        if (twinkle.enable) {\n            const twinkleFreq = twinkle.frequency;\n            const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n            const twinkling = Math.random() < twinkleFreq;\n            if (twinkling && twinkleRgb !== undefined) {\n                colorLine = twinkleRgb;\n                opacity = twinkle.opacity;\n            }\n        }\n        if (!colorLine) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors.get(linksOptions.id)\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = p1.getFillColor();\n                const destColor = p2.getFillColor();\n                if (sourceColor && destColor) {\n                    colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorLine = linkColor;\n            }\n        }\n        const width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n    drawConnectLine(p1, p2) {\n        var _a;\n        const lineStyle = this.lineStyle(p1, p2);\n        if (!lineStyle) {\n            return;\n        }\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        var _a;\n        const container = this.container;\n        const ctx = container.canvas.context;\n        if (!ctx) {\n            return;\n        }\n        const beginPos = particle.getPosition();\n        Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e;\n        if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n            return;\n        }\n        const pfColor = particle.getFillColor();\n        if (pfColor === undefined) {\n            return;\n        }\n        const psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n        const options = this.container.options;\n        const twinkle = particle.particlesOptions.twinkle.particles;\n        const twinkleFreq = twinkle.frequency;\n        const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n        const radius = (_c = particle.bubble.radius) !== null && _c !== void 0 ? _c : particle.size.value;\n        const opacity = twinkling ? twinkle.opacity : (_d = particle.bubble.opacity) !== null && _d !== void 0 ? _d : particle.opacity.value;\n        const infectionStage = particle.infecter.infectionStage;\n        const infection = options.infection;\n        const infectionStages = infection.stages;\n        const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n        const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n        const fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pfColor);\n        const sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(psColor);\n        const fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n        if (!this.context || !fillColorValue) {\n            return;\n        }\n        const strokeColorValue = sColor !== undefined\n            ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_e = particle.stroke.opacity) !== null && _e !== void 0 ? _e : opacity)\n            : fillColorValue;\n        if (particle.links.length > 0) {\n            this.context.save();\n            for (const link of particle.links) {\n                if (particle.particlesOptions.links.triangles.enable) {\n                    const links = particle.links.map((l) => l.destination);\n                    const vertices = link.destination.links.filter((t) => links.indexOf(t.destination) >= 0);\n                    if (vertices.length) {\n                        for (const vertice of vertices) {\n                            this.drawLinkTriangle(particle, link, vertice);\n                        }\n                    }\n                }\n                this.drawLinkLine(particle, link);\n            }\n            this.context.restore();\n        }\n        Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n    }\n    drawPlugin(plugin, delta) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n    paintBase(baseColor) {\n        if (this.context) {\n            Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n        }\n    }\n    lineStyle(p1, p2) {\n        const options = this.container.options;\n        const connectOptions = options.interactivity.modes.connect;\n        if (this.context) {\n            return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n        }\n    }\n    initBackground() {\n        const options = this.container.options;\n        const background = options.background;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (background.color) {\n            const color = Utils_1.ColorUtils.colorToRgb(background.color);\n            if (color) {\n                elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n            }\n        }\n        if (background.image) {\n            elementStyle.backgroundImage = background.image;\n        }\n        if (background.position) {\n            elementStyle.backgroundPosition = background.position;\n        }\n        if (background.repeat) {\n            elementStyle.backgroundRepeat = background.repeat;\n        }\n        if (background.size) {\n            elementStyle.backgroundSize = background.size;\n        }\n    }\n}\nexports.Canvas = Canvas;\n"]},"metadata":{},"sourceType":"script"}