import React from 'react';
import Proton from 'proton-engine';
import RAFManager from 'raf-manager';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var MouseParticles = function (_React$Component) {
  inherits(MouseParticles, _React$Component);

  function MouseParticles(props) {
    classCallCheck(this, MouseParticles);

    var _this = possibleConstructorReturn(this, (MouseParticles.__proto__ || Object.getPrototypeOf(MouseParticles)).call(this, props));

    _this.ease = 0.7;
    _this.level = 0;
    _this.LEVEL = 5;
    _this._allowEmitting = true;
    _this.renderProton = _this.renderProton.bind(_this);
    _this.mouseMoveHandler = _this.mouseMoveHandler.bind(_this);
    _this.mouseDownHandler = _this.mouseDownHandler.bind(_this);
    _this.mouseUpHandler = _this.mouseUpHandler.bind(_this);

    _this.createContainerDom();
    return _this;
  }

  createClass(MouseParticles, [{
    key: "createContainerDom",
    value: function createContainerDom() {
      this.dom = document.createElement("div");
      this.dom.style.position = "fixed";
      this.dom.style.left = "0px";
      this.dom.style.top = "0px";
      this.dom.style.zIndex = 9999;
      this.dom.pointerEvents = "none";
      this.dom.id = "rmps_" + (Math.random() * 999999 >> 0);
      document.body.appendChild(this.dom);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      try {
        document.body.removeEventListener("mousemove", this.mouseMoveHandler, false);
        document.body.removeEventListener("mousedown", this.mouseDownHandler, false);
        document.body.removeEventListener("mouseup", this.mouseUpHandler, false);
        RAFManager.remove(this.renderProton);
        this.proton.destroy();
      } catch (e) {}
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.onCanvasInited();
      this.addMouseEventListener();
      this.setCullList();
    }
  }, {
    key: "onCanvasInited",
    value: function onCanvasInited() {
      this.createProton();
      RAFManager.add(this.renderProton);
    }
  }, {
    key: "addMouseEventListener",
    value: function addMouseEventListener() {
      document.body.addEventListener("mousemove", this.mouseMoveHandler, false);
      document.body.addEventListener("mousedown", this.mouseDownHandler, false);
      document.body.addEventListener("mouseup", this.mouseUpHandler, false);
    }
  }, {
    key: "mouseDownHandler",
    value: function mouseDownHandler(e) {}
  }, {
    key: "mouseUpHandler",
    value: function mouseUpHandler(e) {}
  }, {
    key: "mouseMoveHandler",
    value: function mouseMoveHandler(e) {
      if (this.isCullDom(e)) return;
      var x = void 0,
          y = 0;

      x = e.clientX;
      y = e.clientY;

      this.emitter.p.x += (x - this.emitter.p.x) * this.ease;
      this.emitter.p.y += (y - this.emitter.p.y) * this.ease;

      if (this._allowEmitting) this.emitter.emit("once");
    }
  }, {
    key: "setCullList",
    value: function setCullList() {
      this.cullClassList = this.props.cull || "";
      this.cullClassList = this.cullClassList.split(",");

      this.LEVEL = this.props.level || 6;
    }
  }, {
    key: "isCullDom",
    value: function isCullDom(e) {
      this.level = 0;

      if (isInputText(e.target)) return true;
      if (isTextBox(e.target)) return true;
      if (!this.cullClassList || !this.cullClassList.length) return false;

      return this.isContain(e.target, this.cullClassList);
    }
  }, {
    key: "isContain",
    value: function isContain(element, cullClassList) {
      if (this.level >= this.LEVEL) return false;
      if (!element) return false;
      if (!element.classList) return false;
      if (element === document.body) return false;

      for (var i = 0; i < cullClassList.length; i++) {
        if (element.classList.contains(cullClassList[i])) {
          return true;
        }
      }
      this.level++;

      return this.isContain(element.parentNode, cullClassList);
    }
  }, {
    key: "createProton",
    value: function createProton(canvas) {
      this.proton = new Proton();

      var emitter = new Proton.Emitter();
      emitter.rate = new Proton.Rate(this.props.num || 3);
      emitter.damping = 0.008;

      var life = this.props.life ? new Proton.Life(this.props.life) : new Proton.Life(0.2, 0.5);
      var color = this.props.color || "random";
      var g = this.props.g;
      var v = this.props.v || 0.65;
      var alpha = this.props.alpha || Proton.getSpan(0.25, 0.55);
      var tha = this.props.tha ? new Proton.Span(this.props.tha[0], this.props.tha[1]) : new Proton.Span(0, 360);
      var radius = new Proton.Radius(2, 5);
      if (this.props.radius) {
        var r = this.props.radius;
        radius = new Proton.Radius(r * 0.8, r);
      }

      emitter.addInitialize(new Proton.Mass(1));
      emitter.addInitialize(radius);
      emitter.addInitialize(life);
      emitter.addInitialize(new Proton.Velocity(new Proton.Span(v), tha, "polar"));

      emitter.addBehaviour(new Proton.Alpha(alpha));
      emitter.addBehaviour(new Proton.Color(color));
      emitter.addBehaviour(new Proton.Scale(1, 0.1));
      emitter.addBehaviour(new Proton.RandomDrift(10, 10, 0.2));
      if (g) {
        emitter.addBehaviour(new Proton.G(parseFloat(g)));
      }

      this.proton.addEmitter(emitter);
      var renderer = new Proton.DomRenderer(this.dom);
      this.proton.addRenderer(renderer);
      this.emitter = emitter;
    }
  }, {
    key: "renderProton",
    value: function renderProton() {
      this.proton && this.proton.update();
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(React.Fragment, null);
    }
  }]);
  return MouseParticles;
}(React.Component);

// utils function


function isInputText(element) {
  return element instanceof HTMLInputElement && element.type === "text";
}

function isTextBox(element) {
  var tagName = element.tagName.toLowerCase();
  if (tagName === "textarea") return true;
  if (tagName === "input") return true;

  return false;
}

export default MouseParticles;
//# sourceMappingURL=index.es.js.map
